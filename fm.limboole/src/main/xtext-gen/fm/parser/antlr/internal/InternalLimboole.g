/*
 * generated by Xtext 2.36.0
 */
grammar InternalLimboole;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fm.services.LimbooleGrammarAccess;

}

@parser::members {

 	private LimbooleGrammarAccess grammarAccess;

    public InternalLimbooleParser(TokenStream input, LimbooleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Expr";
   	}

   	@Override
   	protected LimbooleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExprAccess().getIffParserRuleCall());
	}
	this_Iff_0=ruleIff
	{
		$current = $this_Iff_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleIff
entryRuleIff returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIffRule()); }
	iv_ruleIff=ruleIff
	{ $current=$iv_ruleIff.current; }
	EOF;

// Rule Iff
ruleIff returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIffAccess().getImpliesParserRuleCall_0());
		}
		this_Implies_0=ruleImplies
		{
			$current = $this_Implies_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getIffAccess().getIffLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='<->'
			{
				newLeafNode(otherlv_2, grammarAccess.getIffAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIffAccess().getRightImpliesParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleImplies
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIffRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"fm.Limboole.Implies");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleImplies
entryRuleImplies returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImpliesRule()); }
	iv_ruleImplies=ruleImplies
	{ $current=$iv_ruleImplies.current; }
	EOF;

// Rule Implies
ruleImplies returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImpliesAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				otherlv_1='->'
				{
					newLeafNode(otherlv_1, grammarAccess.getImpliesAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0());
				}
				    |
				otherlv_2='<-'
				{
					newLeafNode(otherlv_2, grammarAccess.getImpliesAccess().getLessThanSignHyphenMinusKeyword_1_0_1());
				}
			)
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getImpliesAccess().getImpliesLeftAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImpliesAccess().getRightOrParserRuleCall_1_2_0());
					}
					lv_right_4_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImpliesRule());
						}
						set(
							$current,
							"right",
							lv_right_4_0,
							"fm.Limboole.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='|'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"fm.Limboole.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getNotParserRuleCall_0());
		}
		this_Not_0=ruleNot
		{
			$current = $this_Not_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"fm.Limboole.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current; }
	EOF;

// Rule Not
ruleNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNotAccess().getBasicParserRuleCall_0());
		}
		this_Basic_0=ruleBasic
		{
			$current = $this_Basic_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='!'
			{
				newLeafNode(otherlv_1, grammarAccess.getNotAccess().getExclamationMarkKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getNotAccess().getNotParserRuleCall_1_1());
			}
			this_Not_2=ruleNot
			{
				$current = $this_Not_2.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBasic
entryRuleBasic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicRule()); }
	iv_ruleBasic=ruleBasic
	{ $current=$iv_ruleBasic.current; }
	EOF;

// Rule Basic
ruleBasic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_0_0=RULE_VAR
				{
					newLeafNode(lv_var_0_0, grammarAccess.getBasicAccess().getVarVARTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_0_0,
						"fm.Limboole.VAR");
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getBasicAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getBasicAccess().getExprParserRuleCall_1_1());
			}
			this_Expr_2=ruleExpr
			{
				$current = $this_Expr_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getBasicAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_VAR : ('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'['|']'|'$'|'@'|'0'..'9')* ('a'..'z'|'A'..'Z'|'_'|'.'|'['|']'|'$'|'@'|'0'..'9');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
