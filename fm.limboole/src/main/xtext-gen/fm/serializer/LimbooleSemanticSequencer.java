/*
 * generated by Xtext 2.36.0
 */
package fm.serializer;

import com.google.inject.Inject;
import fm.limboole.And;
import fm.limboole.Expr;
import fm.limboole.Iff;
import fm.limboole.Implies;
import fm.limboole.LimboolePackage;
import fm.limboole.Or;
import fm.services.LimbooleGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LimbooleSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LimbooleGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LimboolePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LimboolePackage.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case LimboolePackage.EXPR:
				sequence_Basic(context, (Expr) semanticObject); 
				return; 
			case LimboolePackage.IFF:
				sequence_Iff(context, (Iff) semanticObject); 
				return; 
			case LimboolePackage.IMPLIES:
				sequence_Implies(context, (Implies) semanticObject); 
				return; 
			case LimboolePackage.OR:
				sequence_Or(context, (Or) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expr returns And
	 *     Iff returns And
	 *     Iff.Iff_1_0 returns And
	 *     Implies returns And
	 *     Implies.Implies_1_1 returns And
	 *     Or returns And
	 *     Or.Or_1_0 returns And
	 *     And returns And
	 *     And.And_1_0 returns And
	 *     Not returns And
	 *     Basic returns And
	 *
	 * Constraint:
	 *     (left=And_And_1_0 right=Not)
	 * </pre>
	 */
	protected void sequence_And(ISerializationContext context, And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LimboolePackage.Literals.EXPR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LimboolePackage.Literals.EXPR__LEFT));
			if (transientValues.isValueTransient(semanticObject, LimboolePackage.Literals.EXPR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LimboolePackage.Literals.EXPR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndAccess().getAndLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expr returns Expr
	 *     Iff returns Expr
	 *     Iff.Iff_1_0 returns Expr
	 *     Implies returns Expr
	 *     Implies.Implies_1_1 returns Expr
	 *     Or returns Expr
	 *     Or.Or_1_0 returns Expr
	 *     And returns Expr
	 *     And.And_1_0 returns Expr
	 *     Not returns Expr
	 *     Basic returns Expr
	 *
	 * Constraint:
	 *     var=VAR
	 * </pre>
	 */
	protected void sequence_Basic(ISerializationContext context, Expr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LimboolePackage.Literals.EXPR__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LimboolePackage.Literals.EXPR__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBasicAccess().getVarVARTerminalRuleCall_0_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expr returns Iff
	 *     Iff returns Iff
	 *     Iff.Iff_1_0 returns Iff
	 *     Implies returns Iff
	 *     Implies.Implies_1_1 returns Iff
	 *     Or returns Iff
	 *     Or.Or_1_0 returns Iff
	 *     And returns Iff
	 *     And.And_1_0 returns Iff
	 *     Not returns Iff
	 *     Basic returns Iff
	 *
	 * Constraint:
	 *     (left=Iff_Iff_1_0 right=Implies)
	 * </pre>
	 */
	protected void sequence_Iff(ISerializationContext context, Iff semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LimboolePackage.Literals.EXPR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LimboolePackage.Literals.EXPR__LEFT));
			if (transientValues.isValueTransient(semanticObject, LimboolePackage.Literals.EXPR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LimboolePackage.Literals.EXPR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIffAccess().getIffLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getIffAccess().getRightImpliesParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expr returns Implies
	 *     Iff returns Implies
	 *     Iff.Iff_1_0 returns Implies
	 *     Implies returns Implies
	 *     Implies.Implies_1_1 returns Implies
	 *     Or returns Implies
	 *     Or.Or_1_0 returns Implies
	 *     And returns Implies
	 *     And.And_1_0 returns Implies
	 *     Not returns Implies
	 *     Basic returns Implies
	 *
	 * Constraint:
	 *     (left=Implies_Implies_1_1 right=Or)
	 * </pre>
	 */
	protected void sequence_Implies(ISerializationContext context, Implies semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LimboolePackage.Literals.EXPR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LimboolePackage.Literals.EXPR__LEFT));
			if (transientValues.isValueTransient(semanticObject, LimboolePackage.Literals.EXPR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LimboolePackage.Literals.EXPR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImpliesAccess().getImpliesLeftAction_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getImpliesAccess().getRightOrParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expr returns Or
	 *     Iff returns Or
	 *     Iff.Iff_1_0 returns Or
	 *     Implies returns Or
	 *     Implies.Implies_1_1 returns Or
	 *     Or returns Or
	 *     Or.Or_1_0 returns Or
	 *     And returns Or
	 *     And.And_1_0 returns Or
	 *     Not returns Or
	 *     Basic returns Or
	 *
	 * Constraint:
	 *     (left=Or_Or_1_0 right=And)
	 * </pre>
	 */
	protected void sequence_Or(ISerializationContext context, Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LimboolePackage.Literals.EXPR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LimboolePackage.Literals.EXPR__LEFT));
			if (transientValues.isValueTransient(semanticObject, LimboolePackage.Literals.EXPR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LimboolePackage.Literals.EXPR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrAccess().getOrLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
}
