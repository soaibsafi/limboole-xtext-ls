/*
 * generated by Xtext 2.36.0
 */
package fm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fm.ide.contentassist.antlr.internal.InternalLimbooleParser;
import fm.services.LimbooleGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class LimbooleParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LimbooleGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LimbooleGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getImpliesAccess().getAlternatives_1_0(), "rule__Implies__Alternatives_1_0");
			builder.put(grammarAccess.getNotAccess().getAlternatives(), "rule__Not__Alternatives");
			builder.put(grammarAccess.getBasicAccess().getAlternatives(), "rule__Basic__Alternatives");
			builder.put(grammarAccess.getIffAccess().getGroup(), "rule__Iff__Group__0");
			builder.put(grammarAccess.getIffAccess().getGroup_1(), "rule__Iff__Group_1__0");
			builder.put(grammarAccess.getImpliesAccess().getGroup(), "rule__Implies__Group__0");
			builder.put(grammarAccess.getImpliesAccess().getGroup_1(), "rule__Implies__Group_1__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getNotAccess().getGroup_1(), "rule__Not__Group_1__0");
			builder.put(grammarAccess.getBasicAccess().getGroup_1(), "rule__Basic__Group_1__0");
			builder.put(grammarAccess.getIffAccess().getRightAssignment_1_2(), "rule__Iff__RightAssignment_1_2");
			builder.put(grammarAccess.getImpliesAccess().getRightAssignment_1_2(), "rule__Implies__RightAssignment_1_2");
			builder.put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
			builder.put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
			builder.put(grammarAccess.getBasicAccess().getVarAssignment_0(), "rule__Basic__VarAssignment_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LimbooleGrammarAccess grammarAccess;

	@Override
	protected InternalLimbooleParser createParser() {
		InternalLimbooleParser result = new InternalLimbooleParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LimbooleGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LimbooleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
