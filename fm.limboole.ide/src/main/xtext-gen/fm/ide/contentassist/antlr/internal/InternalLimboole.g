/*
 * generated by Xtext 2.36.0
 */
grammar InternalLimboole;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fm.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fm.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fm.services.LimbooleGrammarAccess;

}
@parser::members {
	private LimbooleGrammarAccess grammarAccess;

	public void setGrammarAccess(LimbooleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleExpr
entryRuleExpr
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprAccess().getIffParserRuleCall()); }
		ruleIff
		{ after(grammarAccess.getExprAccess().getIffParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIff
entryRuleIff
:
{ before(grammarAccess.getIffRule()); }
	 ruleIff
{ after(grammarAccess.getIffRule()); } 
	 EOF 
;

// Rule Iff
ruleIff 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIffAccess().getGroup()); }
		(rule__Iff__Group__0)
		{ after(grammarAccess.getIffAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImplies
entryRuleImplies
:
{ before(grammarAccess.getImpliesRule()); }
	 ruleImplies
{ after(grammarAccess.getImpliesRule()); } 
	 EOF 
;

// Rule Implies
ruleImplies 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImpliesAccess().getGroup()); }
		(rule__Implies__Group__0)
		{ after(grammarAccess.getImpliesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getAlternatives()); }
		(rule__Not__Alternatives)
		{ after(grammarAccess.getNotAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasic
entryRuleBasic
:
{ before(grammarAccess.getBasicRule()); }
	 ruleBasic
{ after(grammarAccess.getBasicRule()); } 
	 EOF 
;

// Rule Basic
ruleBasic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicAccess().getAlternatives()); }
		(rule__Basic__Alternatives)
		{ after(grammarAccess.getBasicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0()); }
		'->'
		{ after(grammarAccess.getImpliesAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getImpliesAccess().getLessThanSignHyphenMinusKeyword_1_0_1()); }
		'<-'
		{ after(grammarAccess.getImpliesAccess().getLessThanSignHyphenMinusKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getBasicParserRuleCall_0()); }
		ruleBasic
		{ after(grammarAccess.getNotAccess().getBasicParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotAccess().getGroup_1()); }
		(rule__Not__Group_1__0)
		{ after(grammarAccess.getNotAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Basic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicAccess().getVarAssignment_0()); }
		(rule__Basic__VarAssignment_0)
		{ after(grammarAccess.getBasicAccess().getVarAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBasicAccess().getGroup_1()); }
		(rule__Basic__Group_1__0)
		{ after(grammarAccess.getBasicAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group__0__Impl
	rule__Iff__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getImpliesParserRuleCall_0()); }
	ruleImplies
	{ after(grammarAccess.getIffAccess().getImpliesParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getGroup_1()); }
	(rule__Iff__Group_1__0)*
	{ after(grammarAccess.getIffAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Iff__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group_1__0__Impl
	rule__Iff__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getIffLeftAction_1_0()); }
	()
	{ after(grammarAccess.getIffAccess().getIffLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group_1__1__Impl
	rule__Iff__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_1()); }
	'<->'
	{ after(grammarAccess.getIffAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getRightAssignment_1_2()); }
	(rule__Iff__RightAssignment_1_2)
	{ after(grammarAccess.getIffAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Implies__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group__0__Impl
	rule__Implies__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getOrParserRuleCall_0()); }
	ruleOr
	{ after(grammarAccess.getImpliesAccess().getOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getGroup_1()); }
	(rule__Implies__Group_1__0)?
	{ after(grammarAccess.getImpliesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Implies__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group_1__0__Impl
	rule__Implies__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getAlternatives_1_0()); }
	(rule__Implies__Alternatives_1_0)
	{ after(grammarAccess.getImpliesAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group_1__1__Impl
	rule__Implies__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getImpliesLeftAction_1_1()); }
	()
	{ after(grammarAccess.getImpliesAccess().getImpliesLeftAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getRightAssignment_1_2()); }
	(rule__Implies__RightAssignment_1_2)
	{ after(grammarAccess.getImpliesAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getVerticalLineKeyword_1_1()); }
	'|'
	{ after(grammarAccess.getOrAccess().getVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getNotParserRuleCall_0()); }
	ruleNot
	{ after(grammarAccess.getAndAccess().getNotParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAmpersandKeyword_1_1()); }
	'&'
	{ after(grammarAccess.getAndAccess().getAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_1__0__Impl
	rule__Not__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getExclamationMarkKeyword_1_0()); }
	'!'
	{ after(grammarAccess.getNotAccess().getExclamationMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotParserRuleCall_1_1()); }
	ruleNot
	{ after(grammarAccess.getNotAccess().getNotParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Basic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Basic__Group_1__0__Impl
	rule__Basic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Basic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getBasicAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Basic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Basic__Group_1__1__Impl
	rule__Basic__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Basic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicAccess().getExprParserRuleCall_1_1()); }
	ruleExpr
	{ after(grammarAccess.getBasicAccess().getExprParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Basic__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Basic__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Basic__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getBasicAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Iff__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIffAccess().getRightImpliesParserRuleCall_1_2_0()); }
		ruleImplies
		{ after(grammarAccess.getIffAccess().getRightImpliesParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesAccess().getRightOrParserRuleCall_1_2_0()); }
		ruleOr
		{ after(grammarAccess.getImpliesAccess().getRightOrParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0()); }
		ruleNot
		{ after(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Basic__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicAccess().getVarVARTerminalRuleCall_0_0()); }
		RULE_VAR
		{ after(grammarAccess.getBasicAccess().getVarVARTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_VAR : ('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'['|']'|'$'|'@'|'0'..'9')* ('a'..'z'|'A'..'Z'|'_'|'.'|'['|']'|'$'|'@'|'0'..'9');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
